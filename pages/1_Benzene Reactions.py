from cgitb import text
import streamlit as st
import os
import time
import google.generativeai as genai
import pandas as pd
import re

# Set up API Key
os.environ["GOOGLE_API_KEY"] = "AIzaSyAdS57TfssxTs_Z0_YTXB3kikFv7KqWtA0"
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

st.set_page_config(page_title="Benzene Reactions", page_icon="‚öõÔ∏è", layout="wide", initial_sidebar_state="auto")



# Data for Benzene Reactions
benzene_reactions = {
    "Sr.No": [
        1, 2, 3, 4, 5
    ],
    "Reaction Name": [
        "Halogenation",
        "Nitration",
        "Sulfonation",
        "Friedel-Crafts Alkylation",
        "Friedel-Crafts Acylation"
    ],
    "Reaction Overview": [
        "Electrophilic aromatic substitution of benzene with halogens (Cl‚ÇÇ, Br‚ÇÇ).",
        "Electrophilic aromatic substitution of benzene with nitric acid to form nitrobenzene.",
        "Electrophilic aromatic substitution of benzene with sulfur trioxide (SO‚ÇÉ) to form benzene sulfonic acid.",
        "Electrophilic aromatic substitution where an alkyl group is introduced into benzene.",
        "Electrophilic aromatic substitution where an acyl group is introduced into benzene."
    ],
    "Catalyst": [
        "FeCl‚ÇÉ (Ferric chloride) or AlCl‚ÇÉ (Aluminum chloride)",
        "H‚ÇÇSO‚ÇÑ (Sulfuric acid)",
        "H‚ÇÇSO‚ÇÑ (Sulfuric acid)",
        "AlCl‚ÇÉ (Aluminum chloride)",
        "AlCl‚ÇÉ (Aluminum chloride)"
    ]
}

@st.cache_data
# Function to load elements from CSV
# def load_elements():
#     return pd.read_csv('elements.csv')

# elements_df = load_elements()

def convert_to_latex_format(text):
    return re.sub(r'<sub>(\d+)</sub>', r'_\1', text)

# Create DataFrames
st.title("Benzene Reactions")

st.subheader("Have a quick revision on Name and Benzene Reactions", divider="red")

df2 = pd.DataFrame(benzene_reactions)

with st.expander("Show Benzene Reactions"):
        st.dataframe(df2, use_container_width=True, hide_index=True)

st.subheader("Perform Benzene Reactions", divider="red")
    

benzene = st.selectbox(
        'Select Benzene Reaction',
        df2['Reaction Name'].tolist(),
        placeholder="Select at least one reaction",
        help="Choose the Benzene Reaction you want to perform.",
)   
compounds = st.text_input(
        'Enter Reactants (**seperated by commas**)',
        # compounds_df['Compounds'].tolist(),

        placeholder="e.g., H2O, NaCl",
        help="Type the name or formula of reactant",
)

substrate = st.text_input(
        'Enter Substrate (**seperated by commas**)',
        # compounds_df['Compounds'].tolist(),

        placeholder="e.g., ethanol, benzene",
        help="Type the name or formula of substrate",
    )

catalyst = st.text_input(
        'Enter Catalyst (**seperated by commas**)',
        # compounds_df['Compounds'].tolist(),

        placeholder="e.g., H2SO4, AlCl3",
        help="Type the name or formula of catalyst",
    )
temperature = st.number_input('Temperature (K)', min_value=0, max_value=1000, value=300, step=1)    

    # Trigger the Reaction Simulation
if st.button('Perform Reaction'):
        if compounds:
            st.write(f"**You Selected:** {benzene}")
            st.subheader("Result", divider="red")   
        
            with st.status('Performing the reaction...', expanded=True):
                try:
                    # Send prompt to Google genai API
                    model = genai.GenerativeModel("gemini-1.5-pro-002")
                    # Combine the prompt into one string
                    prompt = (
                    f"Perform a reaction using the reactants {compounds}, catalysts {catalyst}, "
                    f"and substrates {substrate}. Show the product. Display the chemical formulas of "
                    f"reactants, catalysts, substrates, and products. Provide detailed information "
                    f"on the {benzene} reaction, including: 1. Definition, 2. Conditions (temperature, catalyst, etc.), "
                    f"3. Mechanism, and 4. General structure of the product in ASCII format. "
                    f"Describe the product with its chemical names and formulas."
                )

                    response = model.generate_content(prompt)
                    result = response.text
                    result = convert_to_latex_format(result)
                    # Assuming the response is divided by two newlines between sections
                    st.write(result)
                    st.success("Done", **{"icon": "‚úî"})
                except Exception as e:
                    st.error(f"**Error:** There was an issue with the API request: {e}")
                    
            st.warning("Result is generated by Generative AI, it can make mistakes in some cases, please cross check the result from your side")
        else:
            st.error("Please ensure that you have provided inputs of both **reactants** and **substrate**.")

st.sidebar.subheader("About Name Reaction Simulator: ", divider="orange")
st.sidebar.info("üìå The Name Reactions and Benzene Reactions Simulator is an advanced AI-powered tool designed to help chemistry students to explore, learn and simulate chemical reactions. The app focuses on well-known Name Reactions and Benzene Reactions, offering detailed information about the mechanisms, conditions, and products of these reactions. Additionally, users can simulate reactions by selecting specific reactants and substrates, with detailed results generated using Generative AI.",)


